app BangerBanners {
  wasp: {
    version: "^0.15.0"
  },

  title: "Blog Banner GPT",

  head: [
    "<meta charset='utf-8' />",
    "<meta name='description' content='Instantly generate blog banners and open graph images from a title.' />",
    "<meta name='author' content='Blog Banner GPT' />",
    "<meta name='keywords' content='blog, banner, open graph, image, title, ai, generative ai, banner generator, open graph image generator' />",
    
    "<meta property='og:type' content='website' />",
    "<meta property='og:title' content='Blog Banner GPT' />",
    "<meta property='og:site_name' content='Blog Banner GPT' />",
    "<meta property='og:url' content='https://blogbannergpt.xyz' />", // TODO: change to the actual url
    "<meta property='og:description' content='Instantly generate blog banners and open graph images from a title.' />",
    "<meta property='og:image' content='https://blogbannergpt.xyz/public-banner.webp' />",
    "<meta name='twitter:image' content='https://blogbannergpt.xyz/public-banner.webp' />",
    "<meta name='twitter:image:width' content='800' />",
    "<meta name='twitter:image:height' content='400' />",
    "<meta name='twitter:card' content='summary_large_image' />",
    // TODO: You can put your Plausible analytics scripts below (https://docs.opensaas.sh/guides/analytics/):
    // NOTE: Plausible does not use Cookies, so you can simply add the scripts here.
    // Google, on the other hand, does, so you must instead add the script dynamically
    // via the Cookie Consent component after the user clicks the "Accept" cookies button.
    "<script defer data-domain='blogbannergpt.xyz' src='https://plausible.io/js/script.js'></script>",  
    "<script defer data-domain='blogbannergpt.xyz' src='https://plausible.io/js/script.local.js'></script>"// TODO: change to the actual site id
  ],

  // üîê Auth out of the box! https://wasp-lang.dev/docs/auth/overview
  auth: {
    userEntity: User,
    methods: {
      // NOTE: If you decide to not use email auth, make sure to also delete the related routes and pages below.
      //   (RequestPasswordReset(Route|Page), PasswordReset(Route|Page), EmailVerification(Route|Page))
      // email: {
      //   fromField: {
      //     name: "Open SaaS App",
      //     email: "me@example.com"
      //   },
      //   emailVerification: {
      //     clientRoute: EmailVerificationRoute,
      //     getEmailContentFn: import { getVerificationEmailContent } from "@src/auth/email-and-pass/emails",
      //   },
      //   passwordReset: {
      //     clientRoute: PasswordResetRoute,
      //     getEmailContentFn: import { getPasswordResetEmailContent } from "@src/auth/email-and-pass/emails",
      //   },
      //   userSignupFields: import { getEmailUserFields } from "@src/auth/userSignupFields",
      // },
      // Uncomment to enable Google Auth (check https://wasp-lang.dev/docs/auth/social-auth/google for setup instructions):
      google: { // Guide for setting up Auth via Google
        userSignupFields: import { getGoogleUserFields } from "@src/auth/userSignupFields",
        configFn: import { getGoogleAuthConfig } from "@src/auth/userSignupFields",
      },
      // Uncomment to enable GitHub Auth (check https://wasp-lang.dev/docs/auth/social-auth/github for setup instructions):
      // gitHub: {
      //   userSignupFields: import { getGitHubUserFields } from "@src/auth/userSignupFields",
      //   configFn: import { getGitHubAuthConfig } from "@src/auth/userSignupFields",
      // },
      // Uncomment to enable Discord Auth (check https://wasp-lang.dev/docs/auth/social-auth/discord for setup instructions):
      // discord: {
      //   userSignupFields: import { getDiscordUserFields } from "@src/auth/userSignupFields",
      //   configFn: import { getDiscordAuthConfig } from "@src/auth/userSignupFields"
      // }
    },
    onAfterSignup: import { onAfterSignup } from "@src/auth/hooks",
    onAuthFailedRedirectTo: "/login",
    onAuthSucceededRedirectTo: "/",
  },

  db: {
    // Run `wasp db seed` to seed the database with the seed functions below:
    seeds: [
      // Populates the database with a bunch of fake users to work with during development.
      import { seedMockUsers } from "@src/server/scripts/dbSeeds",
      import { seedTemplates } from "@src/server/scripts/dbSeeds",
    ]
  },

  server: {
    middlewareConfigFn: import { serverMiddlewareFn } from "@src/server/serverSetup",
  },

  client: {
    setupFn: import { setupQueryClient } from "@src/client/queryClient",
    rootComponent: import App from "@src/client/App",
  },
}

//#region Auth Pages
route LoginRoute { path: "/login", to: LoginPage }
page LoginPage {
  component: import Login from "@src/auth/LoginPage"
}

route SignupRoute { path: "/signup", to: SignupPage }
page SignupPage {
  component: import { Signup } from "@src/auth/SignupPage"
}
//#endregion

//#region User
route AccountRoute { path: "/account", to: AccountPage }
page AccountPage {
  authRequired: true,
  component: import Account from "@src/user/AccountPage"
}

query getPaginatedUsers {
  fn: import { getPaginatedUsers } from "@src/user/operations",
  entities: [User]
}

action updateCurrentUser {
  fn: import { updateCurrentUser } from "@src/user/operations",
  entities: [User]
}

action updateUserById {
  fn: import { updateUserById } from "@src/user/operations",
  entities: [User]
}
//#endregion

//#region Editor
route ImageOverlayRoute { path: "/image-overlay", to: ImageOverlayPage }
route ImageOverlayRouteWithId { path: "/image-overlay/:id", to: ImageOverlayPage }
page ImageOverlayPage {
  authRequired: true,
  component: import { ImageOverlay } from "@src/editor/components/ImageOverlay.tsx"
}

route BrandRoute { path: "/brand", to: BrandPage }
page BrandPage {
  authRequired: true,
  component: import { Brand } from "@src/editor/components/Brand.tsx"
}

query getImageProxy {
  fn: import { getImageProxy } from "@src/banner/operations",
  entities: [User, GeneratedImageData]
}

action removeObjectFromImage {
  fn: import { removeObjectFromImage } from "@src/banner/operations",
  entities: [User, GeneratedImageData]
}

action saveGeneratedImageData {
  fn: import { saveGeneratedImageData } from "@src/banner/operations",
  entities: [User, GeneratedImageData]
}

action saveBrandThemeSettings {
  fn: import { saveBrandThemeSettings } from "@src/banner/operations",
  entities: [User, BrandTheme]
}

query getBrandThemeSettings {
  fn: import { getBrandThemeSettings } from "@src/banner/operations",
  entities: [User, BrandTheme]
}

action saveBrandLogo {
  fn: import { saveBrandLogo } from "@src/banner/operations",
  entities: [User, BrandTheme]
}
//#endregion

//#region Banner
query getImageTemplates {
  fn: import { getImageTemplates } from "@src/banner/operations",
  entities: [User, ImageTemplate]
}

query getImageTemplateById {
  fn: import { getImageTemplateById } from "@src/banner/operations",
  entities: [User, ImageTemplate]
}

action generateBannerFromTemplate {
  fn: import { generateBannerFromTemplate } from "@src/banner/operations",
  entities: [User, GeneratedImageData, ImageTemplate, BrandTheme]
}

action generatePromptFromTitle {
  fn: import { generatePromptFromTitle } from "@src/banner/operations",
  entities: [User, BrandTheme, ImageTemplate]
}

action generatePrompts {
  fn: import { generatePrompts } from "@src/banner/operations",
  entities: [User]
}

action generatePromptFromImage {
  fn: import { generatePromptFromImage } from "@src/banner/operations",
  entities: [User]
}

query getRecentGeneratedImageData {
  fn: import { getRecentGeneratedImageData } from "@src/banner/operations",
  entities: [User, GeneratedImageData]
}

query getGeneratedImageDataById {
  fn: import { getGeneratedImageDataById } from "@src/banner/operations",
  entities: [User, GeneratedImageData]
}
//#endregion

//#region Image Generation
route RecentGeneratedImagesRoute { path: "/recent-images", to: RecentGeneratedImagesPage }
page RecentGeneratedImagesPage {
  authRequired: true,
  component: import { RecentGeneratedImages } from "@src/editor/components/RecentGeneratedImages"
}

route GenerateImagePromptRoute { path: "/", to: GenerateImagePromptPage }
route GenerateImagePromptFromTemplateRoute { path: "/generate-image/:id", to: GenerateImagePromptPage }
page GenerateImagePromptPage {
  component: import { GenerateImagePrompt } from "@src/editor/components/GenerateImagePrompt"
}

route EditImagesRoute { path: "/edit-image", to: EditImagePage }
route EditImageRoute { path: "/edit-image/:id", to: EditImagePage }
page EditImagePage {
  component: import { EditImage } from "@src/editor/components/EditImage"
}

job deleteOldGeneratedImagesJob {
  executor: PgBoss,
  perform: {
    fn: import { deleteOldGeneratedImagesWorker } from "@src/server/worker/deleteOldGeneratedImagesWorker"
  },
  schedule: {
    cron: "0 * * * *"
  },
  entities: [User, GeneratedImageData]
}
//#endregion

//#region Payment
route PricingPageRoute { path: "/pricing", to: PricingPage }
page PricingPage {
  component: import PricingPage from "@src/payment/PricingPage"
}

route CheckoutRoute { path: "/checkout", to: CheckoutPage }
page CheckoutPage {
  authRequired: true,
  component: import Checkout from "@src/payment/CheckoutPage"
}

query getCustomerPortalUrl {
  fn: import { getCustomerPortalUrl } from  "@src/payment/operations",
  entities: [User]
}

action generateCheckoutSession {
  fn: import { generateCheckoutSession } from "@src/payment/operations",
  entities: [User]
}

api paymentsWebhook {
  fn: import { paymentsWebhook } from "@src/payment/webhook",
  entities: [User],
  middlewareConfigFn: import { paymentsMiddlewareConfigFn } from "@src/payment/webhook",
  httpRoute: (POST, "/payments-webhook")
}
//#endregion

//#region File Upload
action createFile {
  fn: import { createFile } from "@src/file-upload/operations",
  entities: [User, File]
}

query getAllFilesByUser {
  fn: import { getAllFilesByUser } from "@src/file-upload/operations",
  entities: [User, File]
}

query getDownloadFileSignedURL {
  fn: import { getDownloadFileSignedURL } from "@src/file-upload/operations",
  entities: [User, File]
}
//#endregion

//#region Analytics
query getDailyStats {
  fn: import { getDailyStats } from "@src/analytics/operations",
  entities: [User, DailyStats]
}

job dailyStatsJob {
  executor: PgBoss,
  perform: {
    fn: import { calculateDailyStats } from "@src/analytics/stats"
  },
  schedule: {
    cron: "0 * * * *" // every hour. useful in production
    // cron: "* * * * *" // every minute. useful for debugging
  },
  entities: [User, DailyStats, Logs, PageViewSource]
}
//#endregion

//#region Admin Dashboard
route AdminRoute { path: "/admin", to: AnalyticsDashboardPage }
page AnalyticsDashboardPage {
  authRequired: true,
  component: import AnalyticsDashboardPage from "@src/admin/dashboards/analytics/AnalyticsDashboardPage"
}

route AdminUsersRoute { path: "/admin/users", to: AdminUsersPage }
page AdminUsersPage {
  authRequired: true,
  component: import AdminUsers from "@src/admin/dashboards/users/UsersDashboardPage"
}

route AdminSettingsRoute { path: "/admin/settings", to: AdminSettingsPage }
page AdminSettingsPage {
  authRequired: true,
  component: import AdminSettings from "@src/admin/elements/settings/SettingsPage"
}

route AdminChartsRoute { path: "/admin/chart", to: AdminChartsPage }
page AdminChartsPage {
  authRequired: true,
  component: import AdminCharts from "@src/admin/elements/charts/ChartsPage"
}

route AdminFormElementsRoute { path: "/admin/forms/form-elements", to: AdminFormElementsPage }
page AdminFormElementsPage {
  authRequired: true,
  component: import AdminForms from "@src/admin/elements/forms/FormElementsPage"
}

route AdminFormLayoutsRoute { path: "/admin/forms/form-layouts", to: AdminFormLayoutsPage }
page AdminFormLayoutsPage {
  authRequired: true,
  component: import AdminForms from "@src/admin/elements/forms/FormLayoutsPage"
}

route AdminCalendarRoute { path: "/admin/calendar", to: AdminCalendarPage }
page AdminCalendarPage {
  authRequired: true,
  component: import AdminCalendar from "@src/admin/elements/calendar/CalendarPage"
}

route AdminUIAlertsRoute { path: "/admin/ui/alerts", to: AdminUIAlertsPage }
page AdminUIAlertsPage {
  authRequired: true,
  component: import AdminUI from "@src/admin/elements/ui-elements/AlertsPage"
}

route AdminUIButtonsRoute { path: "/admin/ui/buttons", to: AdminUIButtonsPage }
page AdminUIButtonsPage {
  authRequired: true,
  component: import AdminUI from "@src/admin/elements/ui-elements/ButtonsPage"
}

route NotFoundRoute { path: "*", to: NotFoundPage }
page NotFoundPage {
  component: import { NotFoundPage } from "@src/client/components/NotFoundPage"
}
//#endregion

//#region Contact Form Messages
// TODO: 
// add functionality to allow users to send messages to admin
// and make them accessible via the admin dashboard
route AdminMessagesRoute { path: "/admin/messages", to: AdminMessagesPage }
page AdminMessagesPage {
  authRequired: true,
  component: import AdminMessages from "@src/messages/MessagesPage"
}
//#endregion
